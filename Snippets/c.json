{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Printf()": {
		"prefix": "pf",
		"body": [
			"printf(\"$1\");",
			"$0"
		],
		"description": "shortcut for printf();"
	},
	"Scanf()": {
		"prefix": "sf",
		"body": [
			"scanf(\"$1\");",
			"$0"
		],
		"description": "shortcut for scanf();"
	},
	"Main()": {
		"prefix": "main",
		"body": [
			"int main(){",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "shortcut for main();"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if($1){",
			"\t$2",
			"}",
			"$0"
		],
		"description": "shortcut for if();"
	},
	"else if": {
		"prefix": "elif",
		"body": [
			"else if($1){",
			"\t$2",
			"}",
			"$0"
		],
		"description": "shortcut for else if();"
	},
	"if else": {
		"prefix": "ifel",
		"body": [
			"if($1){",
			"\t$2",
			"}else{",
			"\t$3",
			"}",
			"$0"
		],
		"description": "shortcut for else if();"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for($1;$2;$3){",
			"\t$4",
			"}",
			"$0"
		],
		"description": "shortcut for for();"
	},
	"for int i < N": {
		"prefix": "fori",
		"body": [
			"for(int $index =0; $index<$N;$index++){",
			"\t$0",
			"}"
		],
		"description": "shortcut for for(int index=0; index<N; index++);"
	},
	"for loop": {
		"prefix": "forl",
		"body": [
			"for(;;){",
			"\t$1",
			"}",
			"$0"
		],
		"description": "shortcut for for(int index=0; index<N; index++);"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while($1){",
			"\t$2",
			"}",
			"$0"
		],
		"description": "shortcut for while();"
	},
	"do while": {
		"prefix": "dowhile",
		"body": [
			"do{",
			"\t$1",
			"}while($2);",
			"$0"
		],
		"description": "shortcut for do while();"
	},
	"else": {
		"prefix": "el",
		"body": [
			"else{",
			"\t$1",
			"}",
			"$0"
		],
		"description": "shortcut for else;"
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch($1){",
			"\tcase $2:",
			"\t\t$3",
			"\t\tbreak;",
			"\tdefault:",
			"\t\t$4",
			"\t\tbreak;",
			"}",
			"$0"
		],
		"description": "shortcut for switch();"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case $1:",
			"\t$2",
			"\tbreak;",
			"$0"
		],
		"description": "shortcut for case;"
	},
	"break": {
		"prefix": "br",
		"body": [
			"break;",
			"$0"
		],
		"description": "shortcut for break;"
	},
	"continue": {
		"prefix": "cont",
		"body": [
			"continue;",
			"$0"
		],
		"description": "shortcut for continue;"
	},
	"return": {
		"prefix": "ret",
		"body": [
			"return $1;",
			"$0"
		],
		"description": "shortcut for return;"
	},
	"define": {
		"prefix": "def",
		"body": [
			"#define $1 $2",
			"$0"
		],
		"description": "shortcut for #define;"
	},
	"include from current folder": {
		"prefix": "inc",
		"body": [
			"#include \"$1\"",
			"$0"
		],
		"description": "shortcut for #include <>;"
	},
	"include from compiler": {
		"prefix": "inc",
		"body": [
			"#include <$1>",
			"$0"
		],
		"description": "shortcut for #include <>;"
	},
	"typedef": {
		"prefix": "typ",
		"body": [
			"typedef $1 $2;",
			"$0"
		],
		"description": "shortcut for typedef;"
	},
	"struct": {
		"prefix": "str",
		"body": [
			"struct $1{",
			"\t$2",
			"}$3;",
			"$0"
		],
		"description": "shortcut for struct;"
	},
	"union": {
		"prefix": "uni",
		"body": [
			"union $1{",
			"\t$2",
			"}$3;",
			"$0"
		],
		"description": "shortcut for union;"
	},
	"enum": {
		"prefix": "enu",
		"body": [
			"enum $1{",
			"\t$2",
			"}$3;",
			"$0"
		],
		"description": "shortcut for enum;"
	},
	"typedef struct": {
		"prefix": "tstr",
		"body": [
			"typedef struct $1{",
			"\t$2",
			"}$3;",
			"$0"
		],
		"description": "shortcut for typedef struct;"
	},
	"typedef union": {
		"prefix": "tuni",
		"body": [
			"typedef union $1{",
			"\t$2",
			"}$3;",
			"$0"
		],
		"description": "shortcut for typedef union;"
	},
	"typedef enum": {
		"prefix": "tenu",
		"body": [
			"typedef enum $1{",
			"\t$2",
			"}$3;",
			"$0"
		],
		"description": "shortcut for typedef enum;"
	},
	"sizeof": {
		"prefix": "size",
		"body": [
			"sizeof($1)",
			"$0"
		],
		"description": "shortcut for sizeof;"
	},
	"NULL": {
		"prefix": "nu",
		"body": [
			"NULL;",
			"$0"
		],
		"description": "shortcut for NULL;"
	},
	"static": {
		"prefix": "sta",
		"body": [
			"static $1 $2;",
			"$0"
		],
		"description": "shortcut for static;"
	},
	"const": {
		"prefix": "cons",
		"body": [
			"const $1 $2;",
			"$0"
		],
		"description": "shortcut for const;"
	},
	"volatile": {
		"prefix": "vol",
		"body": [
			"volatile $1 $2;",
			"$0"
		],
		"description": "shortcut for volatile;"
	},
	"unsigned": {
		"prefix": "uns",
		"body": [
			"unsigned $1 $2;",
			"$0"
		],
		"description": "shortcut for unsigned;"
	},
	"signed": {
		"prefix": "sig",
		"body": [
			"signed $1 $2;",
			"$0"
		],
		"description": "shortcut for signed;"
	},
	"extern": {
		"prefix": "ext",
		"body": [
			"extern $1 $2;",
			"$0"
		],
		"description": "shortcut for extern;"
	},
	"auto": {
		"prefix": "aut",
		"body": [
			"auto $1 $2;",
			"$0"
		],
		"description": "shortcut for auto;"
	},
	"register": {
		"prefix": "reg",
		"body": [
			"register $1 $2;",
			"$0"
		],
		"description": "shortcut for register;"
	},
	"goto": {
		"prefix": "go",
		"body": [
			"goto $1;",
			"$0"
		],
		"description": "shortcut for goto;"
	},
	"Function": {
		"prefix": "func",
		"body": [
			"${1:int} ${2:function_name}(${3:void}) {",
			"\t$4",
			"\treturn ${5:0};",
			"}",
			"$0"
		],
		"description": "Create a function"
	},
	"Pointer": {
		"prefix": "ptr",
		"body": [
			"${1:int}* ${2:ptr_name} = ${3:NULL};",
			"$0"
		],
		"description": "Declare a pointer"
	},
	"Malloc": {
		"prefix": "malloc",
		"body": [
			"${1:int}* ${2:ptr} = (${1:int}*)malloc(${3:size} * sizeof(${1:int}));",
			"if (${2:ptr} == NULL) {",
			"\tprintf(\"Memory allocation failed!\\n\");",
			"\texit(1);",
			"}",
			"$0"
		],
		"description": "Dynamic memory allocation with malloc"
	},
	"Free": {
		"prefix": "free",
		"body": [
			"free(${1:ptr});",
			"${1:ptr} = NULL;",
			"$0"
		],
		"description": "Free dynamically allocated memory"
	},
	"File Open": {
		"prefix": "fopen",
		"body": [
			"FILE* ${1:file} = fopen(\"${2:filename}\", \"${3:r}\");",
			"if (${1:file} == NULL) {",
			"\tperror(\"Error opening file\");",
			"\texit(1);",
			"}",
			"$0"
		],
		"description": "Open a file with error handling"
	},
	"File Close": {
		"prefix": "fclose",
		"body": [
			"fclose(${1:file});",
			"$0"
		],
		"description": "Close a file"
	},
	"Perror": {
		"prefix": "perror",
		"body": [
			"perror(\"${1:Error message}\");",
			"$0"
		],
		"description": "Print error message"
	},
	"Assert": {
		"prefix": "assert",
		"body": [
			"assert(${1:condition});",
			"$0"
		],
		"description": "Assert a condition"
	},
	"Ternary": {
		"prefix": "ternary",
		"body": [
			"${1:condition} ? ${2:true_value} : ${3:false_value};",
			"$0"
		],
		"description": "Ternary operator"
	},
	"Ifdef": {
		"prefix": "ifdef",
		"body": [
			"#ifdef ${1:MACRO}",
			"\t$2",
			"#endif",
			"$0"
		],
		"description": "Conditional compilation with #ifdef"
	},
	"Pragma Once": {
		"prefix": "pragma",
		"body": [
			"#pragma once",
			"$0"
		],
		"description": "Header guard (modern alternative to #ifndef)"
	},
	"Strcpy": {
		"prefix": "strcpy",
		"body": [
			"strcpy(${1:dest}, ${2:src});",
			"$0"
		],
		"description": "Copy a string"
	},
	"Strncpy": {
		"prefix": "strncpy",
		"body": [
			"strncpy(${1:dest}, ${2:src}, ${3:size});",
			"$0"
		],
		"description": "Safe string copy with length limit"
	}
}